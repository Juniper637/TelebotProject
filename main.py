from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from dotenv import load_dotenv
import os

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")


# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–ø–∏—Å–æ–∫ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤ (—Ü–µ–Ω–∑—É—Ä–∞)
BLACKLIST_WORDS = ['–≥–µ–Ω—à–∏–Ω', '–¥—É—Ä–∞–∫', '–ª–æ—Ö']  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ —Å–ª–æ–≤–∞

# –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
def has_bad_words(text: str) -> bool:
    return any(word in text.lower() for word in BLACKLIST_WORDS)

# –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ü–∏—Ñ—Ä –≤ —Ç–µ–∫—Å—Ç–µ
def has_numbers(text: str) -> bool:
    return any(char.isdigit() for char in text)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/start"
@dp.message(Command(commands=["start"]))
async def process_start_command(message: Message):
    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç!\n–ú–µ–Ω—è –∑–æ–≤—É—Ç –≠—Ö–æ-–±–æ—Ç!\n'
        '–Ø —É–º–µ—é:\n'
        '- –ü–æ–≤—Ç–æ—Ä—è—Ç—å —Ç–µ–∫—Å—Ç (/help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥)\n'
        '- –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞\n'
        '- –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ü–∏—Ñ—Ä\n'
        '- –†–∞–±–æ—Ç–∞—Ç—å —Å–æ —Å—Ç–∏–∫–µ—Ä–∞–º–∏'
    )


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/help"
@dp.message(Command(commands=['help']))
async def process_help_command(message: Message):
    await message.answer(
        '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n'
        '/start - –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ\n'
        '/help - —Å–ø—Ä–∞–≤–∫–∞\n'
        '/caps <—Ç–µ–∫—Å—Ç> - –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä\n'
        '/reverse <—Ç–µ–∫—Å—Ç> - –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å —Ç–µ–∫—Å—Ç\n\n'
        '–§–∏–ª—å—Ç—Ä—ã:\n'
        '- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞\n'
        '- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ü–∏—Ñ—Ä –≤ —Ç–µ–∫—Å—Ç–µ\n\n'
        '–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä –∏–ª–∏ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç'
    )


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/caps"
@dp.message(Command(commands=['caps']))
async def process_caps_command(message: Message):
    text = message.text[6:].strip()
    if text:
        if has_bad_words(text):
            await message.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∞—à —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–ª–æ–≤–∞')
        else:
            await message.reply(text.upper())
    else:
        await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /caps')


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/reverse"
@dp.message(Command(commands=['reverse']))
async def process_reverse_command(message: Message):
    text = message.text[9:].strip()
    if text:
        if has_bad_words(text):
            await message.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∞—à —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–ª–æ–≤–∞')
        else:
            await message.reply(text[::-1])
    else:
        await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /reverse')


@dp.message(lambda message: message.sticker)
async def handle_sticker(message: Message):
    await message.reply("–ö—Ä—É—Ç–æ–π —Å—Ç–∏–∫–µ—Ä! üòä –£ –º–µ–Ω—è –±—ã —Ç–æ–∂–µ —Ç–∞–∫–æ–π –±—ã–ª, –Ω–æ —è –≤—Å–µ–≥–æ –ª–∏—à—å –±–æ—Ç...")


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —Å —Ü–∏—Ñ—Ä–∞–º–∏
@dp.message(lambda message: message.text and has_numbers(message.text))
async def handle_text_with_numbers(message: Message):
    await message.reply("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä—ã! üî¢")


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —Å –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
@dp.message(lambda message: message.text and has_bad_words(message.text))
async def handle_bad_words(message: Message):
    await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–ª–æ–≤–∞ üö´")


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –æ–±—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message()
async def send_echo(message: Message):
    await message.reply(text=message.text)


if __name__ == '__main__':
    dp.run_polling(bot)